<?php

// Script completo para corrigir problemas em produ√ß√£o
// Execute: php fix-production-complete.php

echo "üîß Corre√ß√£o completa para produ√ß√£o...\n";

// 1. Verificar se estamos no diret√≥rio correto
if (!file_exists('artisan')) {
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do Laravel\n";
    exit(1);
}

// 2. Verificar configura√ß√µes atuais
echo "üìã Verificando configura√ß√µes atuais...\n";
echo "Diret√≥rio atual: " . getcwd() . "\n";
echo "APP_ENV: " . (getenv('APP_ENV') ?: 'n√£o definido') . "\n";
echo "APP_DEBUG: " . (getenv('APP_DEBUG') ?: 'n√£o definido') . "\n";

// 3. Corrigir problema do PailServiceProvider
echo "\nüîß Corrigindo problema do PailServiceProvider...\n";

// Verificar bootstrap/providers.php
$providersFile = 'bootstrap/providers.php';
if (file_exists($providersFile)) {
    $providersContent = file_get_contents($providersFile);
    
    if (strpos($providersContent, 'PailServiceProvider') !== false) {
        echo "‚ùå Encontrada refer√™ncia ao PailServiceProvider\n";
        
        // Fazer backup
        file_put_contents($providersFile . '.backup', $providersContent);
        echo "‚úÖ Backup criado: bootstrap/providers.php.backup\n";
        
        // Remover refer√™ncia ao PailServiceProvider
        $providersContent = preg_replace('/.*PailServiceProvider.*\n/', '', $providersContent);
        
        if (file_put_contents($providersFile, $providersContent)) {
            echo "‚úÖ Refer√™ncia ao PailServiceProvider removida\n";
        }
    } else {
        echo "‚úÖ Nenhuma refer√™ncia ao PailServiceProvider encontrada\n";
    }
}

// 4. Corrigir configura√ß√µes para produ√ß√£o
echo "\nüîß Corrigindo configura√ß√µes para produ√ß√£o...\n";
if (file_exists('.env')) {
    $envContent = file_get_contents('.env');
    
    // Fazer backup do .env
    file_put_contents('.env.backup', $envContent);
    echo "‚úÖ Backup do .env criado\n";
    
    // Substituir configura√ß√µes de desenvolvimento
    $envContent = preg_replace('/^APP_ENV=.*$/m', 'APP_ENV=production', $envContent);
    $envContent = preg_replace('/^APP_DEBUG=.*$/m', 'APP_DEBUG=false', $envContent);
    
    // Remover caminhos absolutos incorretos
    $envContent = preg_replace('/^.*\/Applications\/MAMP\/htdocs\/orbita\/.*$/m', '', $envContent);
    
    // Adicionar configura√ß√µes de produ√ß√£o se n√£o existirem
    if (strpos($envContent, 'APP_ENV=production') === false) {
        $envContent .= "\nAPP_ENV=production\n";
    }
    
    if (strpos($envContent, 'APP_DEBUG=false') === false) {
        $envContent .= "\nAPP_DEBUG=false\n";
    }
    
    if (file_put_contents('.env', $envContent)) {
        echo "‚úÖ Arquivo .env corrigido para produ√ß√£o\n";
    } else {
        echo "‚ùå Erro ao corrigir .env\n";
    }
} else {
    echo "‚ùå Arquivo .env n√£o encontrado\n";
}

// 5. Limpar caches
echo "\nüßπ Limpando caches...\n";
$commands = [
    'php artisan cache:clear',
    'php artisan config:clear',
    'php artisan route:clear',
    'php artisan view:clear'
];

foreach ($commands as $command) {
    echo "Executando: $command\n";
    $output = shell_exec($command . ' 2>&1');
    if ($output) {
        echo "Sa√≠da: $output\n";
    }
}

// 6. Verificar e criar diret√≥rios necess√°rios
echo "\nüìÅ Verificando diret√≥rios...\n";
$directories = [
    'storage/framework/views',
    'storage/framework/cache',
    'storage/framework/sessions',
    'storage/logs',
    'bootstrap/cache'
];

foreach ($directories as $dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0755, true)) {
            echo "‚úÖ Diret√≥rio criado: $dir\n";
        } else {
            echo "‚ùå Erro ao criar diret√≥rio: $dir\n";
        }
    } else {
        echo "‚úÖ Diret√≥rio existe: $dir\n";
    }
}

// 7. Corrigir permiss√µes
echo "\nüîê Corrigindo permiss√µes...\n";
$paths = [
    'storage',
    'storage/framework',
    'storage/framework/views',
    'storage/framework/cache',
    'storage/framework/sessions',
    'storage/logs',
    'bootstrap/cache'
];

foreach ($paths as $path) {
    if (is_dir($path)) {
        chmod($path, 0755);
        echo "Permiss√£o 755 aplicada: $path\n";
    }
}

// 8. Regenerar caches
echo "\nüîÑ Regenerando caches...\n";
$regenerateCommands = [
    'php artisan config:cache',
    'php artisan route:cache'
];

foreach ($regenerateCommands as $command) {
    echo "Executando: $command\n";
    $output = shell_exec($command . ' 2>&1');
    if ($output) {
        echo "Sa√≠da: $output\n";
    }
}

// 9. Verificar configura√ß√µes finais
echo "\nüß™ Verificando configura√ß√µes finais...\n";
$testCommands = [
    'php artisan --version',
    'php artisan config:show app.env',
    'php artisan config:show app.debug'
];

foreach ($testCommands as $command) {
    echo "Executando: $command\n";
    $output = shell_exec($command . ' 2>&1');
    if ($output) {
        echo "Sa√≠da: $output\n";
    }
}

echo "\nüéâ Corre√ß√£o completa conclu√≠da!\n";
echo "\nüìã Configura√ß√µes aplicadas:\n";
echo "- PailServiceProvider removido\n";
echo "- APP_ENV=production\n";
echo "- APP_DEBUG=false\n";
echo "- Caminhos de desenvolvimento removidos\n";
echo "- Diret√≥rios criados/verificados\n";
echo "- Permiss√µes corrigidas\n";
echo "- Caches regenerados\n";
echo "\n‚úÖ Agora teste o login em produ√ß√£o:\n";
echo "https://srv971263.hstgr.cloud/login\n";
echo "\nüîç Se ainda houver problemas:\n";
echo "1. Verifique se o servidor web est√° rodando\n";
echo "2. Verifique se o PHP est√° configurado corretamente\n";
echo "3. Execute: chown -R www-data:www-data storage/\n";
echo "4. Execute: chown -R www-data:www-data bootstrap/cache/\n";
