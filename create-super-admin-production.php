<?php

// Script final para criar usu√°rio Super Admin em produ√ß√£o
// Execute: php create-super-admin-production.php

echo "üîß Criando usu√°rio Super Admin em produ√ß√£o...\n";

// 1. Verificar se estamos no diret√≥rio correto
if (!file_exists('artisan')) {
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do Laravel\n";
    exit(1);
}

// 2. Bootstrap Laravel
require_once 'vendor/autoload.php';
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

// 3. Dados do usu√°rio
$name = 'Super Admin';
$email = 'admin@dspay.com.br';
$password = 'admin123456';

echo "üìã Dados do usu√°rio:\n";
echo "- Nome: $name\n";
echo "- Email: $email\n";
echo "- Senha: $password\n";

// 4. Importar classes necess√°rias
use App\Models\User;
use App\Models\Role;
use Illuminate\Support\Facades\Hash;

try {
    // 5. Verificar se as tabelas existem
    echo "\nüîç Verificando estrutura do banco...\n";
    
    $userCount = User::count();
    echo "‚úÖ Tabela users: $userCount usu√°rios\n";
    
    $roleCount = Role::count();
    echo "‚úÖ Tabela roles: $roleCount roles\n";
    
    // 6. Verificar se o role Super Admin existe
    $superAdminRole = Role::where('name', 'super_admin')->first();
    if (!$superAdminRole) {
        echo "‚ùå Role Super Admin n√£o encontrado!\n";
        echo "Execute as migra√ß√µes e seeders primeiro:\n";
        echo "php artisan migrate --force\n";
        echo "php artisan db:seed --force\n";
        exit(1);
    }
    echo "‚úÖ Role Super Admin encontrado (ID: {$superAdminRole->id})\n";

    // 7. Verificar se o usu√°rio j√° existe
    $user = User::where('email', $email)->first();

    if ($user) {
        echo "\n‚ö†Ô∏è Usu√°rio j√° existe. Atualizando...\n";
        
        // Atualizar senha e role
        $user->password = Hash::make($password);
        $user->role_id = $superAdminRole->id;
        $user->is_active = true;
        $user->save();
        
        echo "‚úÖ Usu√°rio atualizado!\n";
    } else {
        echo "\nüë§ Criando novo usu√°rio...\n";
        
        // Criar novo usu√°rio
        $user = new User();
        $user->name = $name;
        $user->email = $email;
        $user->password = Hash::make($password);
        $user->role_id = $superAdminRole->id;
        $user->is_active = true;
        $user->email_verified_at = now();
        $user->save();
        
        echo "‚úÖ Usu√°rio criado com sucesso!\n";
    }

    // 8. Verificar se foi criado/atualizado
    $createdUser = User::where('email', $email)->with('role')->first();
    if ($createdUser) {
        echo "\nüìã Informa√ß√µes do usu√°rio:\n";
        echo "- ID: " . $createdUser->id . "\n";
        echo "- Nome: " . $createdUser->name . "\n";
        echo "- Email: " . $createdUser->email . "\n";
        echo "- Role ID: " . $createdUser->role_id . "\n";
        echo "- Role: " . ($createdUser->role ? $createdUser->role->display_name : 'Nenhum') . "\n";
        echo "- Status: " . ($createdUser->is_active ? 'Ativo' : 'Inativo') . "\n";
        echo "- Criado em: " . $createdUser->created_at . "\n";
        
        // Verificar permiss√µes
        $permissions = $createdUser->getPermissions();
        echo "- Permiss√µes: " . $permissions->count() . " permiss√µes\n";
    }

    // 9. Listar todos os usu√°rios
    echo "\nüìã Lista de todos os usu√°rios:\n";
    $allUsers = User::with('role')->get();
    foreach ($allUsers as $u) {
        echo "- " . $u->name . " (" . $u->email . ") - " . 
             ($u->role ? $u->role->display_name : 'Sem role') . 
             " - " . ($u->is_active ? 'Ativo' : 'Inativo') . "\n";
    }

    echo "\nüéâ Usu√°rio Super Admin criado com sucesso!\n";
    echo "‚úÖ Fa√ßa login em: https://srv971263.hstgr.cloud/login\n";
    echo "üìß Email: $email\n";
    echo "üîë Senha: $password\n";
    echo "‚ö†Ô∏è IMPORTANTE: Altere a senha ap√≥s o primeiro login!\n";
    echo "\nüîê Dicas de seguran√ßa:\n";
    echo "- Use uma senha forte\n";
    echo "- Configure autentica√ß√£o de dois fatores\n";
    echo "- Mantenha as credenciais seguras\n";

} catch (Exception $e) {
    echo "‚ùå Erro ao criar usu√°rio: " . $e->getMessage() . "\n";
    echo "Stack trace: " . $e->getTraceAsString() . "\n";
    
    echo "\nüÜò Solu√ß√µes poss√≠veis:\n";
    echo "1. Execute as migra√ß√µes: php artisan migrate --force\n";
    echo "2. Execute os seeders: php artisan db:seed --force\n";
    echo "3. Verifique as configura√ß√µes do banco no .env\n";
    echo "4. Verifique se o banco de dados est√° rodando\n";
}
