<?php

// Script para diagnosticar e corrigir problemas de autentica√ß√£o e cores em produ√ß√£o

echo "=== DIAGN√ìSTICO E CORRE√á√ÉO DE PRODU√á√ÉO ===\n\n";

// 1. Verificar se h√° problemas de sess√£o/autentica√ß√£o
echo "1. VERIFICANDO CONFIGURA√á√ïES DE SESS√ÉO...\n";

$sessionConfig = __DIR__ . '/config/session.php';
if (file_exists($sessionConfig)) {
    $content = file_get_contents($sessionConfig);
    
    // Verificar configura√ß√µes importantes
    $hasSecureCookies = strpos($content, "'secure' => env('SESSION_SECURE_COOKIE'") !== false;
    $hasSameSite = strpos($content, "'same_site' => 'lax'") !== false;
    
    echo ($hasSecureCookies ? "‚úÖ" : "‚ùå") . " Configura√ß√£o de cookies seguros\n";
    echo ($hasSameSite ? "‚úÖ" : "‚ùå") . " Configura√ß√£o SameSite\n";
} else {
    echo "‚ùå Arquivo de configura√ß√£o de sess√£o n√£o encontrado\n";
}

// 2. Verificar middleware redirect.role
echo "\n2. VERIFICANDO MIDDLEWARE REDIRECT.ROLE...\n";

$redirectRoleMiddleware = __DIR__ . '/app/Http/Middleware/RedirectBasedOnRole.php';
if (file_exists($redirectRoleMiddleware)) {
    echo "‚úÖ Middleware RedirectBasedOnRole existe\n";
    
    $content = file_get_contents($redirectRoleMiddleware);
    if (strpos($content, '/dashboard/licenciados') !== false) {
        echo "‚ö†Ô∏è  Middleware pode estar redirecionando /dashboard/licenciados\n";
    } else {
        echo "‚úÖ Middleware n√£o interfere com /dashboard/licenciados\n";
    }
} else {
    echo "‚ùå Middleware RedirectBasedOnRole n√£o encontrado\n";
}

// 3. Criar script de emerg√™ncia para produ√ß√£o
echo "\n3. CRIANDO SCRIPT DE EMERG√äNCIA PARA PRODU√á√ÉO...\n";

$emergencyScript = '<?php
// SCRIPT DE EMERG√äNCIA PARA PRODU√á√ÉO - ACESSO VIA URL

// Verificar se √© uma requisi√ß√£o web
if (php_sapi_name() !== "cli" && isset($_SERVER["HTTP_HOST"])) {
    
    // 1. Limpar todos os caches
    echo "<h2>üîß LIMPEZA DE EMERG√äNCIA EM PRODU√á√ÉO</h2>";
    
    // Definir caminhos
    $basePath = __DIR__;
    
    // Limpar cache de views
    $viewCachePath = $basePath . "/storage/framework/views";
    if (is_dir($viewCachePath)) {
        $files = glob($viewCachePath . "/*.php");
        foreach ($files as $file) {
            if (is_file($file)) {
                unlink($file);
            }
        }
        echo "<p>‚úÖ Cache de views limpo (" . count($files) . " arquivos)</p>";
    }
    
    // Limpar cache de configura√ß√£o
    $configCachePath = $basePath . "/bootstrap/cache/config.php";
    if (file_exists($configCachePath)) {
        unlink($configCachePath);
        echo "<p>‚úÖ Cache de configura√ß√£o limpo</p>";
    }
    
    // Limpar cache de rotas
    $routeCachePath = $basePath . "/bootstrap/cache/routes-v7.php";
    if (file_exists($routeCachePath)) {
        unlink($routeCachePath);
        echo "<p>‚úÖ Cache de rotas limpo</p>";
    }
    
    // 2. Verificar permiss√µes cr√≠ticas
    echo "<h3>üìÅ VERIFICA√á√ÉO DE PERMISS√ïES</h3>";
    
    $criticalPaths = [
        "storage/logs",
        "storage/framework/cache",
        "storage/framework/sessions",
        "storage/framework/views",
        "bootstrap/cache",
        "public/storage"
    ];
    
    foreach ($criticalPaths as $path) {
        $fullPath = $basePath . "/" . $path;
        if (is_dir($fullPath)) {
            $perms = substr(sprintf("%o", fileperms($fullPath)), -4);
            $writable = is_writable($fullPath);
            echo "<p>" . ($writable ? "‚úÖ" : "‚ùå") . " $path ($perms) " . ($writable ? "Grav√°vel" : "N√ÉO GRAV√ÅVEL") . "</p>";
            
            if (!$writable) {
                // Tentar corrigir permiss√µes
                chmod($fullPath, 0755);
                if (is_writable($fullPath)) {
                    echo "<p>üîß Permiss√£o corrigida para $path</p>";
                }
            }
        } else {
            echo "<p>‚ùå $path n√£o existe</p>";
            // Tentar criar diret√≥rio
            if (mkdir($fullPath, 0755, true)) {
                echo "<p>üîß Diret√≥rio $path criado</p>";
            }
        }
    }
    
    // 3. Verificar storage link
    echo "<h3>üîó VERIFICA√á√ÉO DO STORAGE LINK</h3>";
    $storageLink = $basePath . "/public/storage";
    $storageTarget = $basePath . "/storage/app/public";
    
    if (is_link($storageLink)) {
        $linkTarget = readlink($storageLink);
        echo "<p>‚úÖ Storage link existe: $linkTarget</p>";
    } else {
        echo "<p>‚ùå Storage link n√£o existe</p>";
        // Tentar criar link
        if (symlink($storageTarget, $storageLink)) {
            echo "<p>üîß Storage link criado</p>";
        } else {
            echo "<p>‚ùå Falha ao criar storage link</p>";
        }
    }
    
    // 4. Verificar CSS de branding
    echo "<h3>üé® VERIFICA√á√ÉO DO CSS DE BRANDING</h3>";
    $brandingCSS = $basePath . "/public/css/global-branding.css";
    
    if (file_exists($brandingCSS)) {
        $size = filesize($brandingCSS);
        $writable = is_writable($brandingCSS);
        echo "<p>‚úÖ CSS de branding existe ($size bytes) " . ($writable ? "Grav√°vel" : "Somente leitura") . "</p>";
        
        // Mostrar primeiras linhas
        $content = file_get_contents($brandingCSS);
        $lines = explode("\n", $content);
        echo "<pre style=\"background: #f5f5f5; padding: 10px; border-radius: 5px;\">";
        for ($i = 0; $i < min(10, count($lines)); $i++) {
            echo htmlspecialchars($lines[$i]) . "\n";
        }
        echo "</pre>";
    } else {
        echo "<p>‚ùå CSS de branding n√£o existe</p>";
        
        // Criar CSS b√°sico
        $basicCSS = "/* CSS DE BRANDING B√ÅSICO - GERADO EM EMERG√äNCIA */
:root {
    --primary-color: #3B82F6;
    --secondary-color: #6B7280;
    --accent-color: #10B981;
    --text-color: #1F2937;
    --background-color: #FFFFFF;
    --primary-light: rgba(59, 130, 246, 0.1);
    --primary-dark: #2563EB;
    --primary-text: #FFFFFF;
}

.bg-blue-500, .bg-blue-600, .bg-blue-700, .bg-indigo-500, .bg-indigo-600, .bg-indigo-700 {
    background-color: var(--primary-color) !important;
}

.text-blue-500, .text-blue-600, .text-blue-700, .text-indigo-500, .text-indigo-600, .text-indigo-700 {
    color: var(--primary-color) !important;
}

.hover\\\\:bg-blue-600:hover, .hover\\\\:bg-blue-700:hover, .hover\\\\:bg-indigo-600:hover, .hover\\\\:bg-indigo-700:hover {
    background-color: var(--primary-dark) !important;
}";
        
        if (file_put_contents($brandingCSS, $basicCSS)) {
            echo "<p>üîß CSS b√°sico de branding criado</p>";
        }
    }
    
    // 5. Testar conectividade com banco
    echo "<h3>üóÑÔ∏è TESTE DE CONECTIVIDADE</h3>";
    
    try {
        // Tentar incluir o autoloader do Laravel
        require_once $basePath . "/vendor/autoload.php";
        
        // Tentar carregar configura√ß√£o
        $app = require_once $basePath . "/bootstrap/app.php";
        
        echo "<p>‚úÖ Laravel carregado com sucesso</p>";
        
        // Tentar conectar com banco
        $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
        $kernel->bootstrap();
        
        echo "<p>‚úÖ Bootstrap do Laravel executado</p>";
        
    } catch (Exception $e) {
        echo "<p>‚ùå Erro ao carregar Laravel: " . htmlspecialchars($e->getMessage()) . "</p>";
    }
    
    echo "<h3>‚úÖ LIMPEZA DE EMERG√äNCIA CONCLU√çDA</h3>";
    echo "<p><strong>Pr√≥ximos passos:</strong></p>";
    echo "<ul>";
    echo "<li>Teste o acesso √†s p√°ginas novamente</li>";
    echo "<li>Verifique se as cores est√£o sendo aplicadas</li>";
    echo "<li>Se ainda houver problemas, execute este script novamente</li>";
    echo "</ul>";
    
} else {
    echo "Este script deve ser executado via navegador em produ√ß√£o.\n";
}
?>';

// Salvar script de emerg√™ncia
$emergencyPath = __DIR__ . '/public/emergency-fix.php';
if (file_put_contents($emergencyPath, $emergencyScript)) {
    echo "‚úÖ Script de emerg√™ncia criado: /emergency-fix.php\n";
    echo "   Acesse: https://srv971263.hstgr.cloud/emergency-fix.php\n";
} else {
    echo "‚ùå Erro ao criar script de emerg√™ncia\n";
}

// 4. Verificar e corrigir p√°gina de licenciados especificamente
echo "\n4. CORRIGINDO P√ÅGINA DE LICENCIADOS...\n";

$licenciadosPage = __DIR__ . '/resources/views/dashboard/licenciados.blade.php';
if (file_exists($licenciadosPage)) {
    $content = file_get_contents($licenciadosPage);
    $originalContent = $content;
    
    // Verificar se tem branding
    $hasBranding = strpos($content, 'x-dynamic-branding') !== false;
    echo ($hasBranding ? "‚úÖ" : "‚ùå") . " Componente de branding presente\n";
    
    // Adicionar CSS super agressivo para for√ßar cores
    $superAggressiveCSS = '<style>
/* CSS SUPER AGRESSIVO PARA LICENCIADOS - FOR√áA TODAS AS CORES */
:root {
    --primary-color: #3B82F6 !important;
    --secondary-color: #6B7280 !important;
    --accent-color: #10B981 !important;
    --text-color: #1F2937 !important;
    --background-color: #FFFFFF !important;
    --primary-light: rgba(59, 130, 246, 0.1) !important;
    --primary-dark: #2563EB !important;
    --primary-text: #FFFFFF !important;
}

/* FOR√áA TODOS OS BOT√ïES */
button, .btn, input[type="button"], input[type="submit"], a.button {
    background-color: var(--primary-color) !important;
    border-color: var(--primary-color) !important;
    color: var(--primary-text) !important;
}

button:hover, .btn:hover, input[type="button"]:hover, input[type="submit"]:hover, a.button:hover {
    background-color: var(--primary-dark) !important;
    border-color: var(--primary-dark) !important;
}

/* FOR√áA TODAS AS CLASSES TAILWIND AZUIS */
[class*="bg-blue"], [class*="bg-indigo"] {
    background-color: var(--primary-color) !important;
}

[class*="text-blue"], [class*="text-indigo"] {
    color: var(--primary-color) !important;
}

[class*="border-blue"], [class*="border-indigo"] {
    border-color: var(--primary-color) !important;
}

/* FOR√áA ESTILOS INLINE */
[style*="background-color"] {
    background-color: var(--primary-color) !important;
}

[style*="color: #"] {
    color: var(--primary-color) !important;
}

/* FOR√áA LINKS */
a:not(.no-style) {
    color: var(--primary-color) !important;
}

a:not(.no-style):hover {
    color: var(--primary-dark) !important;
}

/* FOR√áA √çCONES */
.fa, .fas, .far, .fal, .fab, i[class*="fa"] {
    color: var(--primary-color) !important;
}

/* FOR√áA BADGES E PILLS */
.badge, .pill, .tag {
    background-color: var(--primary-color) !important;
    color: var(--primary-text) !important;
}

/* FOR√áA CARDS E CONTAINERS */
.card-header, .panel-header {
    background-color: var(--primary-color) !important;
    color: var(--primary-text) !important;
}

/* FOR√áA TABELAS */
th {
    background-color: var(--primary-color) !important;
    color: var(--primary-text) !important;
}

/* FOR√áA FORMUL√ÅRIOS */
input:focus, select:focus, textarea:focus {
    border-color: var(--primary-color) !important;
    box-shadow: 0 0 0 3px var(--primary-light) !important;
}

/* FOR√áA NAVEGA√á√ÉO */
.nav-link.active, .nav-item.active {
    background-color: var(--primary-color) !important;
    color: var(--primary-text) !important;
}

/* FOR√áA QUALQUER ELEMENTO COM COR HARDCODED */
* {
    --tw-bg-blue-500: var(--primary-color) !important;
    --tw-bg-blue-600: var(--primary-color) !important;
    --tw-bg-indigo-500: var(--primary-color) !important;
    --tw-bg-indigo-600: var(--primary-color) !important;
}
</style>';
    
    // Adicionar CSS super agressivo se n√£o existe
    if (strpos($content, 'CSS SUPER AGRESSIVO PARA LICENCIADOS') === false) {
        if (strpos($content, '</head>') !== false) {
            $content = str_replace('</head>', $superAggressiveCSS . "\n</head>", $content);
        } else {
            $content = $superAggressiveCSS . "\n" . $content;
        }
        
        if (file_put_contents($licenciadosPage, $content)) {
            echo "‚úÖ CSS super agressivo adicionado √† p√°gina de licenciados\n";
        } else {
            echo "‚ùå Erro ao atualizar p√°gina de licenciados\n";
        }
    } else {
        echo "‚ÑπÔ∏è  CSS super agressivo j√° presente\n";
    }
} else {
    echo "‚ùå P√°gina de licenciados n√£o encontrada\n";
}

echo "\n=== CORRE√á√ÉO CONCLU√çDA ===\n";
echo "üåê Acesse: https://srv971263.hstgr.cloud/emergency-fix.php\n";
echo "üé® Teste: https://srv971263.hstgr.cloud/dashboard/licenciados\n";
echo "‚úÖ Sistema de cores super agressivo aplicado\n";

?>
